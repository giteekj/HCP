// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/bilibili/HCP/app/interface/v1/internal/biz"
	"github.com/bilibili/HCP/app/interface/v1/internal/biz/sync"
	"github.com/bilibili/HCP/app/interface/v1/internal/biz/worker"
	"github.com/bilibili/HCP/app/interface/v1/internal/data"
	"github.com/bilibili/HCP/app/interface/v1/internal/server"
	"github.com/bilibili/HCP/app/interface/v1/internal/service"

	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

//go:generate kratos t wire
func InitApp() (*App, func(), error) {
	db, err := biz.NewDB()
	if err != nil {
		return nil, nil, err
	}

	accountRepo := data.NewAccountRepo(db)
	accountUseCase := biz.NewAccountUseCase(accountRepo)
	providerRepo := data.NewProviderRepo(db)
	providerUseCase := biz.NewProviderUseCase(providerRepo)
	cloudProject := data.NewCloudProjectRepo(db)
	cloudProjectUseCase := biz.NewCloudProjectUseCase(cloudProject)
	cloudRegionRepo := data.NewCloudRegionRepo(db)
	cloudRegionUseCase := biz.NewCloudRegionUseCase(cloudRegionRepo)
	cloudRegionAssociationRepo := data.NewCloudRegionAssociationRepo(db)
	cloudRegionAssociationUseCase := biz.NewCloudRegionAssociationUseCase(cloudRegionAssociationRepo)
	cloudSecurityGroupRepo := data.NewCloudSecurityGroupRepo(db)
	cloudSecurityGroupUseCase := biz.NewCloudSecurityGroupUseCase(cloudSecurityGroupRepo)
	cloudServerRepo := data.NewCloudServerRepo(db)
	cloudServerUseCase := biz.NewCloudServerUseCase(cloudServerRepo)
	cloudServerImageRepo := data.NewCloudServerImageRepo(db)
	cloudServerImageUseCase := biz.NewCloudServerImageUseCase(cloudServerImageRepo)
	cloudServerSpecRepo := data.NewCloudServerSpecRepo(db)
	cloudServerSpecUseCase := biz.NewCloudServerSpecUseCase(cloudServerSpecRepo)
	cloudSubnetRepo := data.NewCloudSubnetRepo(db)
	cloudSubnetUseCase := biz.NewCloudSubnetUseCase(cloudSubnetRepo)
	cloudVpcRepo := data.NewCloudVpcRepo(db)
	cloudVpcUseCase := biz.NewCloudVpcUseCase(cloudVpcRepo)
	cloudZoneRepo := data.NewCloudZoneRepo(db)
	cloudZoneUseCase := biz.NewCloudZoneUseCase(cloudZoneRepo)
	formtemplateRepo := data.NewFormTemplateRepo(db)
	formTemplateUseCase := biz.NewFormTemplateUseCase(formtemplateRepo)
	projectConfigRepo := data.NewProjectConfigRepo(db)
	projectConfigUseCase := biz.NewProjectConfigUseCase(projectConfigRepo)
	userRepo := data.NewUserRepo(db)
	userUseCase := biz.NewUserUseCase(userRepo)
	projectAccountConfigRepo := data.NewProjectAccountConfigRepo(db)
	projectAccountConfigUseCase := biz.NewProjectAccountConfigUseCase(projectAccountConfigRepo)
	projectUserConfigRepo := data.NewProjectUserConfigRepo(db)
	projectUserConfigUseCase := biz.NewProjectUserConfigUseCase(projectUserConfigRepo)
	terraformRepo := data.NewTerraformRepo(db)
	terraformUseCase := biz.NewTerraformUseCase(terraformRepo)
	chargeTypeRepo := data.NewChargeTypeRepo(db)
	chargeTypeUseCase := biz.NewChargeTypeUseCase(chargeTypeRepo)
	diskTypeRepo := data.NewDiskTypeRepo(db)
	diskTypeUseCase := biz.NewDiskTypeUseCase(diskTypeRepo)

	jobRepo := data.NewJobRepo(db)
	jobUseCase := biz.NewJobUseCase(jobRepo)

	syncClient := sync.NewClient(accountUseCase, providerUseCase, cloudProjectUseCase, cloudRegionUseCase, cloudRegionAssociationUseCase, cloudSecurityGroupUseCase,
		cloudZoneUseCase, cloudVpcUseCase, cloudSubnetUseCase, cloudServerImageUseCase, cloudServerSpecUseCase, cloudServerUseCase, projectAccountConfigUseCase)

	worker, _ := worker.NewWorker(jobUseCase, providerUseCase, accountUseCase, userUseCase, projectConfigUseCase, projectAccountConfigUseCase, projectUserConfigUseCase,
		cloudServerUseCase, cloudServerSpecUseCase, cloudServerImageUseCase, terraformUseCase, cloudRegionUseCase, cloudZoneUseCase, cloudVpcUseCase, cloudSubnetUseCase,
		cloudSecurityGroupUseCase, cloudServerImageUseCase, cloudServerSpecUseCase, diskTypeUseCase, chargeTypeUseCase, syncClient)

	serviceService, cleanup2, err := service.New(syncClient, accountUseCase, providerUseCase, cloudProjectUseCase, cloudRegionUseCase, cloudRegionAssociationUseCase,
		cloudSecurityGroupUseCase, cloudServerUseCase, cloudServerImageUseCase, cloudServerSpecUseCase, cloudSubnetUseCase, cloudVpcUseCase, cloudZoneUseCase,
		formTemplateUseCase, jobUseCase, projectConfigUseCase, projectAccountConfigUseCase, userUseCase, projectUserConfigUseCase, chargeTypeUseCase,
		diskTypeUseCase, worker)
	if err != nil {
		return nil, nil, err
	}
	engine, err := server.NewHttpServer(serviceService)
	if err != nil {
		cleanup2()
		return nil, nil, err
	}
	app, cleanup3, err := NewApp(serviceService, engine)
	if err != nil {
		cleanup2()
		return nil, nil, err
	}
	return app, func() {
		cleanup3()
		cleanup2()
	}, nil
}
